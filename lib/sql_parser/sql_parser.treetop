grammar Sql
  rule statement
    select from where {
      def tree
        {
          :operator => operator,
          :set_quantifier => set_quantifier,
          :fields => fields,
          :tables => tables,
          :conditions => conditions
        }
      end

      def operator
        :select
      end

      def set_quantifier
        select.set_quantifier
      end

      def fields
        select.fields
      end

      def tables
        from.tables
      end

      def conditions
        where.conditions
      end
    }
  end

  rule select
    "select" quantifier:set_quantifier items {
      def fields
        items.values
      end

      def set_quantifier
        quantifier.value
      end
    }
  end

  rule set_quantifier
    (
      required_space 'distinct' required_space
      /
      required_space 'all' required_space
    ) {
      def value
        text_value.strip.downcase.to_sym
      end
    }
    /
    required_space {
      def value
        nil
      end
    }
  end

  rule from
    required_space "from" required_space items {
      def tables
        items.values
      end
    }
    /
    space {
      def tables
        []
      end
    }
  end

  rule where
    required_space "where" required_space conditional_items {
      def conditions
        conditional_items.node
      end
    }
    /
    space {
      def conditions
        []
      end
    }
  end

  rule conditional_items
    conditional_item required_space boolean_join required_space conditional_items {
      def node
        all_nodes = []
        all_nodes.concat(conditional_item.node)
        all_nodes << {:operator => boolean_join.operator}
        all_nodes.concat(conditional_items.node)
        all_nodes
      end
    }
    /
    conditional_item
  end

  rule boolean_join
    ('and' / 'or') {
      def operator
        text_value.to_sym
      end
    }
  end

  rule conditional_item
    assignment_field space conditional_operator_array space array {
      def node
        [{
          :operator => conditional_operator_array.value,
          :field => assignment_field.text_value.to_sym,
          :value => array.value
        }]
      end
    }
    /
    assignment_field space conditional_operator space assignment_value {
      def node
        [{
          :operator => conditional_operator.value,
          :field => assignment_field.text_value.to_sym,
          :value => assignment_value.value
        }]
      end
    }
  end

  rule conditional_operator_array
    ('!=' / '<>' / 'in' / 'IN' / '=') {
      def value
        text_value.downcase.to_sym
      end
    }
  end

  rule conditional_operator
    ('!=' / '<>' / '>=' / '<=' / '=' / '>' / '<') {
      def value
        text_value.to_sym
      end
    }
  end

  rule assignment_field
    !keyword [a-zA-Z_] [a-zA-Z0-9_]*
  end

  rule assignment_value
    string_assignment_value
    /
    float_assignment_value
    /
    integer_assignment_value
  end

  rule string_assignment_value
    "'" [^']* "'" {
      def value
        text_value[1..-2]
      end
    }
  end

  rule float_assignment_value
    [-+]? [0-9]+ '.' [0-9]+ {
      def value
        Float(text_value)
      end
    }
  end

  rule integer_assignment_value
    [-+]? [0-9]+ {
      def value
        Integer(text_value)
      end
    }
  end

  rule array
    '[' (assignment_value / separator)* ']' {
      def value
        text_value.gsub(' ,', ',')
      end
    }
  end

  rule items
    item space [,]+ space items <SqlParser::ItemsNode>
    /
    item
  end

  rule item
    !keyword [a-z_0-9*]+ <SqlParser::ItemNode>
  end

  rule keyword
    'select' / 'from' / 'in'
  end

  rule required_space
    ' '+
  end

  rule space
    ' '*
  end

  rule separator
    space ',' space
  end
end